#include "leds_control.h"

#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_def.h"
#include "cmsis_os.h"


extern UART_HandleTypeDef huart7;
extern UART_HandleTypeDef huart3;


#ifdef TEST_HEADER
#include TEST_HEADER
#endif

#ifndef NUMFER_OF_LEDS_PER_RING
#define NUMBER_OF_LEDS_PER_RING 24
#endif

#ifndef MAX_ROW
#define MAX_ROW 7
#endif

#ifndef MAX_COL
#define MAX_COL 7
#endif


static inline unsigned char toHexaHalfByte(const unsigned char i) {
	if (i < 10) {
		return '0' + i;
	}
	else if (i < 16) {
		return 'A' + (i - 10);
	}
	else {
		return 'X';
	}
}

static inline void encodeByte(char * const buffer, const unsigned char byte) {
	buffer[0] = toHexaHalfByte((byte >> 4) & 0x0F);
	buffer[1] = toHexaHalfByte(byte & 0x0F);
}

/**
 * @brief compute buffer to control led through serial link
 *
 * @param buffer Buffer to fill. Buffer must have enough memory: (4 + (nb leds per ring)*3) bytes
 * @param row Row number of led to control [1..7]
 * @param col Column number of led to control [1..7]
 * @param red Red value of RGB code
 * @param green Green value of RGB code
 * @param blue Blue value of RGB code
 */
static void computeMessage(char * const buffer,
		const unsigned int row,
		const unsigned int col,
		const unsigned int red,
		const unsigned int green,
		const unsigned int blue) {

	//snprintf((char *)buffer, 10, "R%d%d%02X%02X%02X", row, col, red,green,blue);
	buffer[0] = 'R';
	buffer[1] = toHexaHalfByte(row);
	buffer[2] = toHexaHalfByte(col);
	encodeByte(&(buffer[3]), red);
	encodeByte(&(buffer[5]), green);
	encodeByte(&(buffer[7]), blue);

	// Replace \0 by \n
	buffer[SIZE_OF_LED_COMMAND_BUFFER - 1] = '\n';
}

LedControlReturnCode setLedColor(const unsigned int row, 
		const unsigned int col,
		const unsigned int red,
		const unsigned int green,
		const unsigned int blue) {
	if (row > MAX_ROW || row == 0)
		return LCRC_ERROR_ROW;

	if (col > MAX_COL || col == 0)
		return LCRC_ERROR_COL;

	if (red > 255 || green > 255 || blue > 255)
		return LCRC_ERROR_RGB_VALUE;

	const unsigned int finalRow = row - 1;
	const unsigned int finalCol = col - 1;

	char buffer[SIZE_OF_LED_COMMAND_BUFFER] = {0};
	computeMessage(buffer, finalRow, finalCol, red, green, blue);
	osMessageQueuePut(queue_huart_transmitHandle, &buffer, 0, osWaitForever);

	return LCRC_OK;
}


char readbutton(char *pReadData, char DataSize)
{
	if (osMessageQueueGet(queue_huart_receiveHandle, pReadData, 0, 1000) == osOK){
		return LCRC_OK;
	}
	return LCRC_ERROR_SERIAL_READ;
}


/*-----------------------------------------------------------------------------------
 *
 *
 *                                     THREAD
 *
 *
 * -----------------------------------------------------------------------------------
 */

void serial(void *arg) {
	while(1){
		unsigned char buffer[SIZE_OF_LED_COMMAND_BUFFER] = { 0 };
		if (osMessageQueueGetCount(queue_huart_transmitHandle) != 0){
			osMessageQueueGet(queue_huart_transmitHandle, &buffer, 0, osWaitForever);
			HAL_UART_Transmit(&huart7, buffer, SIZE_OF_LED_COMMAND_BUFFER, 10);
			osDelay(52);
		}

		if (HAL_UART_Receive(&huart7, buffer, SIZE_OF_PLAYER_COMMAND_BUFFER, 10) == HAL_OK){
			osMessageQueuePut(queue_huart_receiveHandle, &buffer, 0, osWaitForever);
		}
	}
}

