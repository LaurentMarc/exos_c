/*
 * leds_control.c
 *
 *  Created on: Nov 17, 2020
 *      Author: marcl
 */
#include "leds_control.h"

static color matrix[MATRIX_SIZE][MATRIX_SIZE];

void init_matrix(void){
	for (int row = 0; row < MATRIX_SIZE; row++) {
		for (int col = 0; col < MATRIX_SIZE; col++) {
			matrix[row][col].red = 0x0;
			matrix[row][col].green = 0x0;
			matrix[row][col].blue = 0x0;
		}
	}
}

uint8_t char_to_dec(char data){
	return data - 48;
}

uint8_t char_to_hex(char value){
	if (value == '0'){
		return 0x0;
	}
	if (value == '1'){
		return 0x1;
	}
	if (value == '2'){
		return 0x2;
	}
	if (value == '3'){
		return 0x3;
	}
	if (value == '4'){
		return 0x4;
	}
	if (value == '5'){
		return 0x5;
	}
	if (value == '6'){
		return 0x6;
	}
	if (value == '7'){
		return 0x7;
	}
	if (value == '8'){
		return 0x8;
	}
	if (value == '9'){
		return 0x9;
	}
	if (value == 'A'){
		return 0xA;
	}
	if (value == 'B'){
		return 0xB;
	}
	if (value == 'C'){
		return 0xC;
	}
	if (value == 'D'){
		return 0xD;
	}
	if (value == 'E'){
		return 0xE;
	}
	if (value == 'F'){
		return 0xF;
	}
	return 0;
}

void update_matrix(uint8_t row, uint8_t col, char *pdata){
	uint8_t left = char_to_hex(pdata[3]);
	uint8_t right = char_to_hex(pdata[4]);
	matrix[row][col].red = (left << 4) | right;
	left = char_to_hex(pdata[5]);
	right = char_to_hex(pdata[6]);
	matrix[row][col].green = (left << 4) | right;
	left = char_to_hex(pdata[7]);
	right = char_to_hex(pdata[8]);
	matrix[row][col].blue = (left << 4) | right;
}


void set_led_matrix(uint8_t max_row, uint8_t max_col){
	taskENTER_CRITICAL();
	uint8_t HIGH_0;
	uint8_t LOW_0;
	uint8_t HIGH_1;
	uint8_t LOW_1;
	uint8_t shift;
	uint8_t mask;
	uint8_t target_led_row = MATRIX_SIZE;
	uint8_t target_led_col = MATRIX_SIZE;
	for (int row = 0; row < target_led_row; row++) {
		if(row == max_row){
			target_led_row = max_row + 1;
			target_led_col = max_col + 1;
		}
		for (int col = 0; col < target_led_col; col++) {
			mask = BIT7;
			for(shift = 0; shift < NB_OF_BITS; shift++){
				mask = mask >> shift;
				HIGH_0 = T0H;
				LOW_0 = T0L;
				HIGH_1 = T1H;
				LOW_1 = T1L;
				if ((matrix[row][col].green & mask) != 0){
					HAL_GPIO_WritePin(LED_module_GPIO_Port, LED_module_Pin, 1);
					while(HIGH_1--);
					HAL_GPIO_WritePin(LED_module_GPIO_Port, LED_module_Pin, 0);
					while(LOW_1--);
				}
				else{
					HAL_GPIO_WritePin(LED_module_GPIO_Port, LED_module_Pin, 1);
					while(HIGH_0--);
					HAL_GPIO_WritePin(LED_module_GPIO_Port, LED_module_Pin, 0);
					while(LOW_0--);
				}
			}
			mask = BIT7;
			for(shift = 0; shift < NB_OF_BITS; shift++){
				mask = mask >> shift;
				HIGH_0 = T0H;
				LOW_0 = T0L;
				HIGH_1 = T1H;
				LOW_1 = T1L;
				if ((matrix[row][col].red & mask) != 0){
					HAL_GPIO_WritePin(LED_module_GPIO_Port, LED_module_Pin, 1);
					while(HIGH_1--);
					HAL_GPIO_WritePin(LED_module_GPIO_Port, LED_module_Pin, 0);
					while(LOW_1--);
				}
				else{
					HAL_GPIO_WritePin(LED_module_GPIO_Port, LED_module_Pin, 1);
					while(HIGH_0--);
					HAL_GPIO_WritePin(LED_module_GPIO_Port, LED_module_Pin, 0);
					while(LOW_0--);
				}
			}
			mask = BIT7;
			for(shift = 0; shift < NB_OF_BITS; shift++){
				mask = mask >> shift;
				HIGH_0 = T0H;
				LOW_0 = T0L;
				HIGH_1 = T1H;
				LOW_1 = T1L;
				if ((matrix[row][col].blue & mask) != 0){
					HAL_GPIO_WritePin(LED_module_GPIO_Port, LED_module_Pin, 1);
					while(HIGH_1--);
					HAL_GPIO_WritePin(LED_module_GPIO_Port, LED_module_Pin, 0);
					while(LOW_1--);
				}
				else{
					HAL_GPIO_WritePin(LED_module_GPIO_Port, LED_module_Pin, 1);
					while(HIGH_0--);
					HAL_GPIO_WritePin(LED_module_GPIO_Port, LED_module_Pin, 0);
					while(LOW_0--);
				}
			}
		}
	}
	HAL_GPIO_WritePin(LED_module_GPIO_Port, LED_module_Pin, 1);
	HAL_GPIO_WritePin(LED_module_GPIO_Port, LED_module_Pin, 0);
	taskEXIT_CRITICAL();
}

void leds_control(void *argument)
{
	init_matrix();
	for(;;)
	{
		char buffer[MAX_BUFFER_SIZE] = "R11003300\n"; // RGB
		//if (receive_message(buffer)){
		uint8_t row = char_to_dec(buffer[1]) - 1;
		uint8_t col = char_to_dec(buffer[2]) - 1;
		update_matrix(row, col, buffer);
		set_led_matrix(row, col);
		osDelay(250);
		char buffer2[MAX_BUFFER_SIZE] = "R11000000\n";
		update_matrix(row, col, buffer2);
		set_led_matrix(row, col);
		osDelay(250);
		//}
	}
}

