#include<stdio.h>
#include<string.h>	//strlen
#include<sys/socket.h>
#include<stdlib.h>	//strlen
#include<arpa/inet.h>	//inet_addr
#include<unistd.h>	//write


int main(int argc, char *argv[]) {
	int socket_desc, new_socket, c, listen_return;
	struct sockaddr_in server, client;
	//Create socket
	socket_desc = socket(AF_INET, SOCK_STREAM, 0);
	if (socket_desc == -1) {
		printf("Could not create socket");
	}
	//Prepare the sockaddr_in structure
	server.sin_family = AF_INET;
	server.sin_addr.s_addr = INADDR_ANY;
	server.sin_port = htons(5001);
	//Bind
	if (bind(socket_desc, (struct sockaddr *) &server, sizeof(server)) < 0) {
		puts("bind failed");
		return 1;
	}
	puts("bind done");
	//Listen
	listen_return = listen(socket_desc, 3);
	if (listen_return < 0){
		perror("listen failed");
		return 1;
	}
	while(1){
		//Accept and incoming connection
		puts("Waiting for incoming connections...");
		c = sizeof(struct sockaddr_in);
		new_socket = accept(socket_desc, (struct sockaddr *) &client,
				(socklen_t*) &c);
		puts("Connection accepted");
		if (new_socket < 0) {
			perror("accept failed");
		}
		int read_size = 0;
		char client_message[2000];
		//Receive a message from client
		while ((read_size = recv(new_socket, client_message, 2000, 0)) > 0) { // traiter boucle attente client
			//Send the message back to client
			if (read_size > 0){
				client_message[read_size] = '\0';
				printf("%s", client_message);
			}
		}
		if (read_size == 0) {
			puts("Client disconnected");
			fflush(stdout);
		} else if (read_size == -1) {
			perror("recv failed");
		}
	}
	//Free the socket pointer
	void* socket_ptr = &socket_desc;
	free(socket_ptr);
	return 0;
}







